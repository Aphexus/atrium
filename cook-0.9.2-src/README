Cook - a tool for building projects in D programming language.
---------------------------------------------------------------------------
Requires no configuration file - it automatically collects information 
about source code from the *.d files in project directory.
Cook is written in D2/Phobos and currently supports Windows and Linux.

To determine which module needs recompiling, Cook traces dependencies between 
all of them. To do this properly, it performs lexical analyzis, which is a 
relatively expensive procedure. But, actually, it's not neccessary to always do 
full scanning, except the very first time. Build writes all metadata into 
cache file, and then uses it, invoking lexer only for modules that has changed, 
and those which depend on them. A process is a kind of chain reaction - if a 
module needs recompiling, everything that rely on it also needs recompiling, 
and so on. This approach is especially useful in compilcated template-based 
environments.
---------------------------------------------------------------------------
Compilation:

    $ dmd cook.d

---------------------------------------------------------------------------
Usage:

Copy the Cook executable into project directory and run it:

    $ ./cook [MAIN_MODULE] [OPTIONS]
 
OPTIONS:

-help             Display information on usage
-emulate          Don't write anything to disk
-quiet            Don't print messages
-rebuild          Force rebuilding all modules
-nocache          Disable reading/writing module cache
-lib              Build a static library instead of executable
                  (currently works only under Windows)
-release          Compile modules in release mode
-noconsole        Under Windows, hide applocation console window
-strip            Remove debug symbols from resulting binary using "strip" utility
                  (currently works only under Linux)
-exclude FILE...  Don't compile specified module(s)
-o FILE           Compile to specified filename
-clean            Remove temporary data (object files, cache, etc.)
-cache FILE       Use specified cache file
-rc FILE          Under Windows, compile and link specified resource file
-C"..."           Pass specified option(s) to compiler
-L"..."           Pass specified option(s) to linker
-run              Run program after compilation (does't work in emulation mode)
-f [FILE]         Read MAINMODULE and OPTIONS from file (default "params.cache")
-s [FILE]         Save MAINMODULE and OPTIONS to file (default "params.cache")


