/*
Copyright (c) 2013 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module engine.physics.rigidbody;

private
{
    import std.math;
    import dlib.math.vector;
    import dlib.math.quaternion;
    import dlib.math.matrix4x4;
    import dlib.math.matrix3x3;
    import engine.physics.geometry;
    import engine.physics.contact;
}

class RigidBody
{
    float mass = 0.0f;
    float invMass = 0.0f;
    Vector3f position;
    Vector3f linearVelocity;
    Vector3f linearAcceleration;

    float inertiaMoment = 0.0f;
    float invInertiaMoment = 0.0f;
    Quaternionf orientation;
    Vector3f angularVelocity;
    Vector3f angularAcceleration;

    Vector3f prevPosition;
    Quaternionf prevOrientation;

    Vector3f finalPosition;
    Quaternionf finalOrientation;
    
    Vector3f gravityDirection;
    Contact lastGroundContact;
    
    float bounceFactor = 0.8f;
    float staticFrictionCoef = 0.5f;
    float dynamicFrictionCoef = 0.5f;
    float dampingFactor = 0.99f;

    Vector3f forceAccumulator = Vector3f(0.0f, 0.0f, 0.0f);
    Vector3f torqueAccumulator = Vector3f(0.0f, 0.0f, 0.0f);

    Geometry geometry = null;
    bool dynamic = false;
    bool disableRotation = false;
    bool gravityEnabled = true;

    void savePreviousState()
    {
        prevPosition = position;
        prevOrientation = orientation;
    }

    this()
    {
        position = Vector3f(0.0f, 0.0f, 0.0f);
        linearVelocity = Vector3f(0.0f, 0.0f, 0.0f);
        linearAcceleration = Vector3f(0.0f, 0.0f, 0.0f);
    
        orientation = Quaternionf(0.0f, 0.0f, 0.0f, 1.0f);
        prevOrientation = Quaternionf(0.0f, 0.0f, 0.0f, 1.0f);
        finalOrientation = Quaternionf(0.0f, 0.0f, 0.0f, 1.0f);
        
        angularVelocity = Vector3f(0.0f, 0.0f, 0.0f);
        angularAcceleration = Vector3f(0.0f, 0.0f, 0.0f);
        
        prevPosition = Vector3f(0.0f, 0.0f, 0.0f);
        finalPosition = Vector3f(0.0f, 0.0f, 0.0f);
        
        gravityDirection = Vector3f(0.0f, -1.0f, 0.0f);
    }

    this(Geometry geom, bool dyn = true)
    {
        geometry = geom;
        dynamic = dyn;
        
        this();

        inertiaMoment = geometry.inertiaMoment(mass);
        invInertiaMoment = 1.0f / inertiaMoment;
    }
    
    void setGeometry(Geometry geom)
    {
        geometry = geom;
        inertiaMoment = geometry.inertiaMoment(mass);
        
        if (inertiaMoment > 0.0f)
            invInertiaMoment = 1.0f / inertiaMoment;
        else
            invInertiaMoment = 1.0;
    }

    void setMass(float m)
    {
        mass = m;
        invMass = 1.0f / m;
        if (geometry !is null)
        {
            inertiaMoment = geometry.inertiaMoment(mass);
            
            if (inertiaMoment > 0.0f)
                invInertiaMoment = 1.0f / inertiaMoment;
            else
                invInertiaMoment = 1.0;
        }
    }
    
    void updateGeometryTransformation()
    {
        if (geometry !is null)
        {
            geometry.setCenter(position);
        }
    }

    void resetForces()
    {
        forceAccumulator = Vector3f(0.0f, 0.0f, 0.0f);
        torqueAccumulator = Vector3f(0.0f, 0.0f, 0.0f);
    }

    Matrix4x4f getTransformation()
    {
        if (disableRotation)
            return translationMatrix(finalPosition);
        else
            return translationMatrix(finalPosition) * finalOrientation.toMatrix();
    }

    void applyForce(Vector3f force)
    {
        forceAccumulator += force;
    }
    
    void applyTorque(Vector3f torque)
    {
        if (!disableRotation)
            torqueAccumulator += torque;
    }

    void applyForceAtPoint(Vector3f force, Vector3f point)
    {
        forceAccumulator += force;
        if (!disableRotation)
            torqueAccumulator += cross(point, force);
    }
    
    void applyImpulse(Vector3f impulse)
    {
        linearVelocity += impulse * invMass;
    }
    
    void applyAngularImpulse(Vector3f angularImpulse)
    {
        if (!disableRotation)
            angularVelocity += angularImpulse * invInertiaMoment;
    }
}

